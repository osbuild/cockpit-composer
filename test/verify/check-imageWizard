#!/usr/bin/python3

import time
import composerlib
import testlib
import os


@testlib.nondestructive
@testlib.no_retry_when_changed
class TestImageWizard(composerlib.ComposerCase):

    def testAWSFields(self):
        b = self.browser

        self.login_and_go("/composer")
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("tr[data-testid=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select AWS
        b.select_PF4("#image-output-select-toggle", "Amazon Web Services (.raw)")
        # Upload image
        b.wait_visible("label:contains('Upload to AWS')")
        b.click("#image-upload")

        b.click("button[aria-label='Upload to AWS help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")

        # Auth page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Access key ID')")
        b.click("button[aria-label='Access key help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-access-key']")
        b.key_press("never")

        b.wait_visible("label:contains('Secret access key')")
        b.click("button[aria-label='Secret access key help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-secret-access-key']")
        b.key_press("gunna")

        # Destination page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Image name')")
        b.click("button[aria-label='Image name help']")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-image-name']")
        b.key_press("give")

        b.wait_visible("label:contains('Amazon S3 bucket')")
        b.click("button[aria-label='S3 bucket help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-s3-bucket']")
        b.key_press("you")

        b.wait_visible("label:contains('AWS region')")
        # check image name help button
        b.click("button[aria-label='Region help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        # enter access key id value
        b.focus("input[id='aws-region']")
        b.key_press("up")
        b.click("button:contains('Next')")

        # Verify AWS Review page

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "ami")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "6")
        with b.wait_timeout(180):
            b.wait_in_text("#review-list", "Packages")
            b.wait_in_text("#review-list", "3")

        # the key values are hidden
        b.wait_in_text("#review-list", "Access key ID")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Secret access key")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Image name")
        b.wait_in_text("#review-list", "give")
        b.wait_in_text("#review-list", "Amazon S3 bucket")
        b.wait_in_text("#review-list", "you")
        b.wait_in_text("#review-list", "AWS region")
        b.wait_in_text("#review-list", "up")

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")

    def testAzureFields(self):
        b = self.browser
        self.login_and_go("/composer")
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("tr[data-testid=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select Azure
        b.select_PF4("#image-output-select-toggle", "Microsoft Azure (.vhd)")
        # Upload image
        b.wait_visible("label:contains('Upload to Azure')")
        b.click("#image-upload")

        b.click("button[aria-label='Upload to Azure help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")

        # Auth page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Storage account')")
        b.click("button[aria-label='Storage account help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-account']")
        b.key_press("never")

        b.wait_visible("label:contains('Storage access key')")
        b.click("button[aria-label='Storage access key help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-access-key']")
        b.key_press("gunna")

        # Destination page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Image name')")
        b.click("button[aria-label='Image name help']")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-image-name']")
        b.key_press("give")

        b.wait_visible("label:contains('Storage container')")
        b.click("button[aria-label='Storage container help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-container']")
        b.key_press("you-up")
        b.click("button:contains('Next')")

        # Verify Azure Review page
        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "vhd")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "2")
        with b.wait_timeout(180):
            b.wait_in_text("#review-list", "Packages")
            b.wait_in_text("#review-list", "3")

        b.wait_in_text("#review-list", "Storage account")
        b.wait_in_text("#review-list", "never")
        # key value is hidden
        b.wait_in_text("#review-list", "Storage access key")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Image name")
        b.wait_in_text("#review-list", "give")
        b.wait_in_text("#review-list", "Storage container")
        b.wait_in_text("#review-list", "you-up")

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")

    def testVMWareFields(self):
        b = self.browser

        self.login_and_go("/composer")
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("tr[data-testid=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select AWS
        b.select_PF4("#image-output-select-toggle", "VMWare VSphere (.vmdk)")
        # Upload image
        b.wait_visible("label:contains('Upload to VMWare')")
        b.click("#image-upload")

        b.click("button[aria-label='Upload to VMWare help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")

        # Auth page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Username')")
        b.focus("input[id='vmware-username']")
        b.key_press("never")

        b.wait_visible("label:contains('Password')")
        b.focus("input[id='vmware-password']")
        b.key_press("gunna")

        # Destination page
        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Image name')")
        b.click("button[aria-label='Image name help']")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='vmware-image-name']")
        b.key_press("give")

        b.wait_visible("label:contains('Host')")
        b.click("button[aria-label='Host help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='vmware-host']")
        b.key_press("you")

        b.wait_visible("label:contains('Cluster')")
        b.click("button[aria-label='Cluster help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='vmware-cluster']")
        b.key_press("up")

        b.wait_visible("label:contains('Datacenter')")
        b.click("button[aria-label='Datacenter help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='vmware-data-center']")
        b.key_press("never-gunna")

        b.wait_visible("label:contains('Datastore')")
        b.click("button[aria-label='Datastore help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='vmware-data-store']")
        b.key_press("let-you-down")
        b.click("button:contains('Next')")

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "vmdk")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "2")
        with b.wait_timeout(180):
            b.wait_in_text("#review-list", "Packages")
            b.wait_in_text("#review-list", "3")

        b.wait_in_text("#review-list", "Username")
        b.wait_in_text("#review-list", "never")
        # password value is hidden
        b.wait_in_text("#review-list", "Password")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Image name")
        b.wait_in_text("#review-list", "give")
        b.wait_in_text("#review-list", "Host")
        b.wait_in_text("#review-list", "you")
        b.wait_in_text("#review-list", "Cluster")
        b.wait_in_text("#review-list", "up")
        b.wait_in_text("#review-list", "Data center")
        b.wait_in_text("#review-list", "never-gunna")
        b.wait_in_text("#review-list", "Data store")
        b.wait_in_text("#review-list", "let-you-down")

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")

    # Test edge-commit/iot-commit so as to verify all fields
    # This image type contains all currently supported ostree settings
    def testOSTreeStep(self):
        b = self.browser

        self.login_and_go("/composer")
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("tr[data-testid=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select ostee image type depending on distro
        distro = os.environ.get("TEST_OS").split('-')[0]
        if (distro == "fedora"):
            image_type_label = "IoT Commit (.tar)"
            image_type = "iot-commit"
        else:
            image_type_label = "RHEL for Edge Commit (.tar)"
            image_type = "edge-commit"

        b.select_PF4("#image-output-select-toggle", image_type_label)

        b.click("button:contains('Next')")

        b.wait_visible("label:contains('Repository URL')")
        b.click("button[aria-label='Repository URL help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='ostree-repo-url']")
        b.key_press("127.0. 0.1")

        b.wait_visible("label:contains('Parent')")
        b.click("button[aria-label='Parent help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.set_input_text("input[id='ostree-parent-commit']", "asdf1234")

        b.wait_visible("label:contains('Ref')")
        b.click("button[aria-label='Ref help']")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='ostree-ref']")
        b.key_press("my/ref")
        b.wait_text("#ostree-ref-helper",
                    "Valid characters for ref are letters from a to z, the digits from 0 to 9, "
                    "the hyphen (-), the underscore (_), the period (.), and the forward slash (/). "
                    "A ref must start with a letter, a number, or an underscore. Slashes must also be "
                    "followed by a letter or number.")

        b.click("button:contains('Next')")
        # Verify AWS Review page
        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", image_type)

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")

    def testCreateQCOW2(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # Create blueprint
        b.click("tr[data-testid=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select qcow2 image type and keep default size
        b.select_PF4("#image-output-select-toggle", "QEMU Image (.qcow2)")
        b.click("button:contains('Next')")

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "qcow2")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "2")

        # Create image
        b.click("footer button:contains('Create')")


if __name__ == '__main__':
    testlib.test_main()
