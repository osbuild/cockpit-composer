#!/usr/bin/python3

# checkpoint:
# 1. create supported image

import os
import composerlib
import testlib
import unittest


@testlib.timeout(2400)
@testlib.nondestructive
@testlib.no_retry_when_changed
class TestImage(composerlib.ComposerCase):

    def testAzureStep(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "vhd")
        b.wait_val("#image-type", "vhd")
        # groups action done
        # still keep Create if upload image not selected
        b.wait_text("#continue-button", "Create")
        # default size = 6GB for azure vhd images
        b.wait_val("#image-size-input", 2)
        # check ? (Azure upload image help) button
        b.click("button[aria-label='Upload image help']")
        print(b.text(".pf-c-popover__body"))
        b.wait_in_text(".pf-c-popover__body",
                       " Image Builder can upload images you create to a Blob container in "
                       "Microsoft Azure. When the image build is complete and the upload action "
                       "is successful, the image file is available in the Storage account and Blob "
                       "container that you specified. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # continue button changes to Next when upload image selected
        b.click("#azure-checkbox")
        b.click("button:contains('Next')")
        # check and enter authentication fields
        b.wait_visible("label:contains('Storage account')")
        # check storage account help button
        b.click("button[aria-label='Storage account help']")
        b.wait_text(".pf-c-popover__body",
                    "Provide the name of a storage account. You can find storage accounts on the "
                    "Storage accounts page in the Azure portal.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter storage account value
        b.focus("input[id='storage-account-input']")
        b.key_press("never")
        b.wait_visible("label:contains('Storage access key')")
        # check storage access key help button
        b.click("button[aria-label='Storage access key help']")
        b.wait_text(".pf-c-popover__body",
                    " Provide the access key for the desired storage account. You can find the "
                    "access key on the Access keys  page of the storage account. You can find "
                    "storage accounts on the Storage accounts page in the Azure portal. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter storage access key value
        b.focus("input[id='storage-access-key-input']")
        b.key_press("gunna")
        # check and enter destination fields
        b.click("button:contains('Destination')")
        b.wait_visible("label:contains('Image name')")
        # check image name help button
        b.click("button[aria-label='Image name help']")
        b.wait_text(".pf-c-popover__body",
                    "Provide a file name to be used for the image file that will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter image name id value
        b.focus("input[id='image-name-input']")
        b.key_press("give")
        b.wait_visible("label:contains('Storage container')")
        # check amazon Storage container help button
        b.click("button[aria-label='Storage container help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    " Provide the Blob container to which the image file will be uploaded. You can "
                    "find containers under the Blob service  section of a storage account. You can "
                    "find storage accounts on the Storage accounts page in the Azure portal. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter storage container value
        b.focus("input[id='storage-container-input']")
        b.key_press("you-up")
        # Verify Azure Review page
        b.click("button:contains('Review')")
        # check ? (Azure upload image help) button
        b.click("button[aria-label='Azure help']")
        b.wait_in_text(".pf-c-popover__body",
                       " Image Builder can upload images you create to a Blob container in "
                       "Microsoft Azure. When the image build is complete and the upload action "
                       "is successful, the image file is available in the Storage account and Blob "
                       "container that you specified. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # Check that the expected fields and values are present
        b.wait_in_text("#azure-content", "Storage account")
        b.wait_in_text("#azure-content", "*****")
        b.wait_in_text("#azure-content", "Storage access key")
        b.wait_in_text("#azure-content", "*****")
        b.wait_in_text("#azure-content", "Image name")
        b.wait_in_text("#azure-content", "give")
        b.wait_in_text("#azure-content", "Storage container")
        b.wait_in_text("#azure-content", "you-up")
        # continue button changes to Finish when upload has valid fields
        b.wait_visible("button:contains('Finish'):enabled")
        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-upload-wizard")

        # collect code coverage result
        self.check_coverage()

    def testVMWareStep(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "vmdk")
        b.wait_val("#image-type", "vmdk")
        # groups action done
        # still keep Create if upload image not selected
        b.wait_text("#continue-button", "Create")
        # default size = 2GB for vmware vmdk images
        b.wait_val("#image-size-input", 2)
        # check ? (VMWare upload image help) button
        b.click("button[aria-label='Upload image help']")
        print(b.text(".pf-c-popover__body"))
        b.wait_in_text(".pf-c-popover__body",
                       " Image Builder can upload images you create to VMWare vSphere. "
                       "When the image build is complete and the upload action is successful, "
                       "the image file is available in the Cluster on the vSphere "
                       "instance that you specified. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # continue button changes to Next when upload image selected
        b.click("#vmware-checkbox")
        b.click("button:contains('Next')")
        # check and enter authentication fields
        b.wait_visible("label:contains('Username')")
        # enter username value
        b.focus("input[id='vmware-username-input']")
        b.key_press("gunna")
        b.wait_visible("label:contains('Password')")
        # enter password value
        b.focus("input[id='vmware-password-input']")
        b.key_press("give")
        # check and enter destination fields
        b.click("button:contains('Destination')")
        b.wait_visible("label:contains('Image name')")
        # check image name help button
        b.click("button[aria-label='Image name help']")
        b.wait_text(".pf-c-popover__body",
                    "Provide a file name to be used for the image file that will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter image name id value
        b.focus("input[id='image-name-input']")
        b.key_press("you-up")
        b.wait_visible("label:contains('Host')")
        # check vSphere host help button
        b.click("button[aria-label='Host help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the url of your VMWare vSphere instance to which the image file will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter host value
        b.focus("input[id='vmware-host-input']")
        b.key_press("never")
        b.wait_visible("label:contains('Cluster')")
        # check cluster help button
        b.click("button[aria-label='Cluster help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the name of the Cluster to which the image file will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter cluster value
        b.focus("input[id='cluster-input']")
        b.key_press("never")
        b.wait_visible("label:contains('Data center')")
        # check data center help button
        b.click("button[aria-label='Datacenter help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the name of the Datacenter to which the image file will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter data center value
        b.focus("input[id='data-center-input']")
        b.key_press("gunna")
        b.wait_visible("label:contains('Data store')")
        # check data store help button
        b.click("button[aria-label='Datastore help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the name of the Datastore to which the image file will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # enter data store value
        b.focus("input[id='data-store-input']")
        b.key_press("let-you-down")
        # Verify VMWare Review page
        b.click("button:contains('Review')")
        # check ? (VMWare upload image help) button
        b.click("button[aria-label='VMWare help']")
        b.wait_in_text(".pf-c-popover__body",
                       " Image Builder can upload images you create to VMWare vSphere. "
                       "When the image build is complete and the upload action is successful, "
                       "the image file is available in the Cluster on the vSphere "
                       "instance that you specified. ")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # Check that the expected fields and values are present
        b.wait_in_text("#vmware-content", "Host")
        b.wait_in_text("#vmware-content", "never")
        b.wait_in_text("#vmware-content", "Username")
        b.wait_in_text("#vmware-content", "gunna")
        b.wait_in_text("#vmware-content", "Password")
        b.wait_in_text("#vmware-content", "****")
        b.wait_in_text("#vmware-content", "Image name")
        b.wait_in_text("#vmware-content", "you-up")
        b.wait_in_text("#vmware-content", "Cluster")
        b.wait_in_text("#vmware-content", "never")
        b.wait_in_text("#vmware-content", "Data Center")
        b.wait_in_text("#vmware-content", "gunna")
        b.wait_in_text("#vmware-content", "Data Store")
        b.wait_in_text("#vmware-content", "let-you-down")
        # continue button changes to Finish when upload has valid fields
        b.wait_visible("button:contains('Finish'):enabled")
        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-upload-wizard")

        # collect code coverage result
        self.check_coverage()

    @unittest.skip("FIXME: Broken")
    def testOSTreeCommit(self):
        b = self.browser
        m = self.machine

        distro = os.environ.get("TEST_OS")
        if (distro == "fedora-34"):
            image_type_ostree = "fedora-iot-commit"
        else:
            image_type_ostree = "edge-commit"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        b.click("#continue-button")
        b.wait_not_present("#create-image-upload-wizard")
        # notification
        b.wait_visible("#alertComposeQueued")
        b.click("#alertComposeQueued .pf-c-alert__action button")
        b.wait_not_present("#alertComposeQueued")

        # got to images tab
        b.click("#httpd-server-name")
        # correct image name and type
        with b.wait_timeout(300):
            b.click("#blueprint-tabs-tab-images")
            b.wait_visible("ul[data-list=images]")
        # get uuid as part of css selector
        uuid = m.execute("""
            composer-cli compose list | grep httpd-server | awk '{print $1}' | head -1
            """).rstrip()
        selector = "{}-compose-name".format(uuid)

        image_type = b.attr("li[aria-labelledby={}] [data-image-type]".format(selector),
                            "data-image-type")
        self.assertEqual(image_type, image_type_ostree)

        # image building needs more time
        with b.wait_timeout(3600):
            b.wait_text("li[aria-labelledby={}] [data-status=true]".format(selector),
                        "Image build complete")
        # log should open and close
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))

        # download image
        b.click("#{}-actions".format(uuid))
        b.click("li[aria-labelledby={}] a:contains('Download')".format(selector))

        # delete image cancel first always
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Cancel')")
        b.wait_not_present("#cmpsr-modal-delete")

        # Deleting an image is currently failing. We believe this is due to an
        # api failure and that this is unrelated to the UI. This section of the
        # test is temporarily disabled.

        # delete here
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Delete image')")
        b.wait_not_present("#{}".format(selector))
        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Parse the name of the distro to know if it is any version of rhel/fedora
    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support ostree container image type")
    @unittest.skip("FIXME: Broken")
    def testOSTreeContainer(self):
        b = self.browser
        m = self.machine

        image_type_ostree = "edge-container"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        b.click("#continue-button")
        b.wait_not_present("#create-image-upload-wizard")
        # notification
        b.wait_visible("#alertComposeQueued")
        b.click("#alertComposeQueued .pf-c-alert__action button")
        b.wait_not_present("#alertComposeQueued")

        # got to images tab
        b.click("#httpd-server-name")
        # correct image name and type
        with b.wait_timeout(300):
            b.click("#blueprint-tabs-tab-images")
            b.wait_visible("ul[data-list=images]")
        # get uuid as part of css selector
        uuid = m.execute("""
            composer-cli compose list | grep httpd-server | awk '{print $1}' | head -1
            """).rstrip()
        selector = "{}-compose-name".format(uuid)

        image_type = b.attr("li[aria-labelledby={}] [data-image-type]".format(selector),
                            "data-image-type")
        self.assertEqual(image_type, image_type_ostree)

        # image building needs more time
        with b.wait_timeout(3600):
            b.wait_text("li[aria-labelledby={}] [data-status=true]".format(selector),
                        "Image build complete")
        # log should exist
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))
        # close logs
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))

        # download image
        b.click("#{}-actions".format(uuid))
        b.click("li[aria-labelledby={}] a:contains('Download')".format(selector))

        # delete image cancel first always
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Cancel')")
        b.wait_not_present("#cmpsr-modal-delete")

        # Deleting an image is currently failing. We believe this is due to an
        # api failure and that this is unrelated to the UI. This section of the
        # test is temporarily disabled.

        # delete here
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Delete image')")
        b.wait_not_present("#{}".format(selector))
        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Parse the name of the distro to know if it is any version of rhel/fedora
    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support ostree image image type")
    def testOSTreeInstaller(self):
        b = self.browser

        image_type_ostree = "edge-installer"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    @unittest.skipIf(os.environ.get("TEST_OS") != "rhel-8-6", "Does not support edge-raw-image image type")
    def testEdgeRaw(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "edge-raw-image")
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Currently only supported on rhel-8-6
    @unittest.skipIf(os.environ.get("TEST_OS") != "rhel-8-6", "Does not support edge-simplified-installer image type")
    def testEdgeSimplifiedInstaller(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "edge-simplified-installer")
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support image-installer image type")
    def testRHELInstaller(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "image-installer")
        # The continue button should be enabled since no fields are required
        self.assertEqual(b.call_js_func('ph_has_attr', "#continue-button", "disabled", ""), False)

        # collect code coverage result
        self.check_coverage()


if __name__ == '__main__':
    testlib.test_main()
