#!/usr/bin/python3

# checkpoint:
# 1. create supported image

import os
import composerlib
import testlib
import unittest


@testlib.timeout(2400)
@testlib.nondestructive
@testlib.no_retry_when_changed
class TestImage(composerlib.ComposerCase):

    @unittest.skip("FIXME: Broken")
    def testOSTreeCommit(self):
        b = self.browser
        m = self.machine

        distro = os.environ.get("TEST_OS")
        if (distro == "fedora-34"):
            image_type_ostree = "fedora-iot-commit"
        else:
            image_type_ostree = "edge-commit"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        b.click("#continue-button")
        b.wait_not_present("#create-image-upload-wizard")
        # notification
        b.wait_visible("#alertComposeQueued")
        b.click("#alertComposeQueued .pf-c-alert__action button")
        b.wait_not_present("#alertComposeQueued")

        # got to images tab
        b.click("#httpd-server-name")
        # correct image name and type
        with b.wait_timeout(300):
            b.click("#blueprint-tabs-tab-images")
            b.wait_visible("ul[data-list=images]")
        # get uuid as part of css selector
        uuid = m.execute("""
            composer-cli compose list | grep httpd-server | awk '{print $1}' | head -1
            """).rstrip()
        selector = "{}-compose-name".format(uuid)

        image_type = b.attr("li[aria-labelledby={}] [data-image-type]".format(selector),
                            "data-image-type")
        self.assertEqual(image_type, image_type_ostree)

        # image building needs more time
        with b.wait_timeout(3600):
            b.wait_text("li[aria-labelledby={}] [data-status=true]".format(selector),
                        "Image build complete")
        # log should open and close
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))

        # download image
        b.click("#{}-actions".format(uuid))
        b.click("li[aria-labelledby={}] a:contains('Download')".format(selector))

        # delete image cancel first always
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Cancel')")
        b.wait_not_present("#cmpsr-modal-delete")

        # Deleting an image is currently failing. We believe this is due to an
        # api failure and that this is unrelated to the UI. This section of the
        # test is temporarily disabled.

        # delete here
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Delete image')")
        b.wait_not_present("#{}".format(selector))
        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Parse the name of the distro to know if it is any version of rhel/fedora
    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support ostree container image type")
    @unittest.skip("FIXME: Broken")
    def testOSTreeContainer(self):
        b = self.browser
        m = self.machine

        image_type_ostree = "edge-container"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        b.click("#continue-button")
        b.wait_not_present("#create-image-upload-wizard")
        # notification
        b.wait_visible("#alertComposeQueued")
        b.click("#alertComposeQueued .pf-c-alert__action button")
        b.wait_not_present("#alertComposeQueued")

        # got to images tab
        b.click("#httpd-server-name")
        # correct image name and type
        with b.wait_timeout(300):
            b.click("#blueprint-tabs-tab-images")
            b.wait_visible("ul[data-list=images]")
        # get uuid as part of css selector
        uuid = m.execute("""
            composer-cli compose list | grep httpd-server | awk '{print $1}' | head -1
            """).rstrip()
        selector = "{}-compose-name".format(uuid)

        image_type = b.attr("li[aria-labelledby={}] [data-image-type]".format(selector),
                            "data-image-type")
        self.assertEqual(image_type, image_type_ostree)

        # image building needs more time
        with b.wait_timeout(3600):
            b.wait_text("li[aria-labelledby={}] [data-status=true]".format(selector),
                        "Image build complete")
        # log should exist
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))
        # close logs
        b.click("li[aria-labelledby={}] button:contains('Logs')".format(selector))

        # download image
        b.click("#{}-actions".format(uuid))
        b.click("li[aria-labelledby={}] a:contains('Download')".format(selector))

        # delete image cancel first always
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Cancel')")
        b.wait_not_present("#cmpsr-modal-delete")

        # Deleting an image is currently failing. We believe this is due to an
        # api failure and that this is unrelated to the UI. This section of the
        # test is temporarily disabled.

        # delete here
        b.click("#{}-actions".format(uuid))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "true")
        b.click("li[aria-labelledby={}] a:contains('Delete')".format(selector))
        b.wait_attr("#{}-actions".format(uuid), "aria-expanded", "false")
        b.click("#cmpsr-modal-delete button:contains('Delete image')")
        b.wait_not_present("#{}".format(selector))
        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Parse the name of the distro to know if it is any version of rhel/fedora
    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support ostree image image type")
    def testOSTreeInstaller(self):
        b = self.browser

        image_type_ostree = "edge-installer"

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", image_type_ostree)
        b.wait_val("#image-type", image_type_ostree)
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    @unittest.skipIf(os.environ.get("TEST_OS") != "rhel-8-6", "Does not support edge-raw-image image type")
    def testEdgeRaw(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "edge-raw-image")
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    # Currently only supported on rhel-8-6
    @unittest.skipIf(os.environ.get("TEST_OS") != "rhel-8-6", "Does not support edge-simplified-installer image type")
    def testEdgeSimplifiedInstaller(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard
        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "edge-simplified-installer")
        # check url help button
        b.click("button[aria-label='OSTree repo url help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body",
                    "Provide the URL of the upstream repository. This repository is where the parent OSTree commit will be pulled from.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check ref help button
        b.click("button[aria-label='OSTree ref help']")
        b.text(".pf-c-popover__body")
        b.wait_text(".pf-c-popover__body", "Provide the name of the branch for the content. If the ref does not already exist it will be created.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")

        # without a url entered the continue button should be disabled
        b.wait_attr("#continue-button", "disabled", "")

        self.allow_journal_messages(".*avc:  denied.*",
                                    ".*audit: .*seresult=denied .*")
        # collect code coverage result
        self.check_coverage()

    @unittest.skipIf(os.environ.get("TEST_OS").split('-')[0] != "rhel", "Does not support image-installer image type")
    def testRHELInstaller(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        b.click("li[data-blueprint=httpd-server] #create-image-button")
        b.wait_text("#create-image-upload-wizard #blueprint-name", "httpd-server")
        b.wait_js_cond('ph_select("#image-type option").length > 1')
        b.set_val("#image-type", "image-installer")
        # The continue button should be enabled since no fields are required
        self.assertEqual(b.call_js_func('ph_has_attr', "#continue-button", "disabled", ""), False)

        # collect code coverage result
        self.check_coverage()


if __name__ == '__main__':
    testlib.test_main()
