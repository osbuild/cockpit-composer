#!/usr/bin/python3

import composerlib
import testlib
import time


@testlib.nondestructive
class TestWizard(composerlib.ComposerCase):

    def testQCOW2Customized(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("li[data-blueprint=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        # check ? (Process length help) button
        time.sleep(1)
        b.wait_text("h1", "Image output")
        b.click("button[aria-label='Process length help']")
        b.wait_text(".pf-c-popover__body", "This process can take a while. "
                    "Images are built in the order they are started.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # check non upload image action (Create only)
        b.select_PF4("#image-output-select-toggle", "QEMU Image (.qcow2)")
        # go to details page
        b.click("button:contains('Next')")
        b.wait_text("h1", "Details")
        # check ? (image size help) button
        b.click("button[aria-label='Image size help']")
        b.wait_text(".pf-c-popover__body",
                    "Set the size that you want the image to be when instantiated. The total "
                    "package size and target destination of your image should be considered when "
                    "setting the image size.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        # default size = 2GB for qcow2 image
        b.wait_val("#image-size", 2)
        b.focus("#image-size")
        # delete 2 and input 1
        b.key_press("\b")
        b.key_press("1")
        # error if less than 2 GB
        b.wait_attr("button:contains('Next')", "disabled", "")
        # delete 1 and input 2
        b.key_press("\b")
        b.key_press("2")

        # go to packages page
        b.click("button:contains('Next')")
        b.wait_text("h1", "Packages")
        # select openssh-server
        b.focus("div[data-testid='search-available-pkgs-input'] input")
        b.key_press("openssh-server")
        b.click("button[aria-label='Search button for available packages']")
        with b.wait_timeout(120):
            b.click("li[data-testid='openssh-server']")
            b.click("button[aria-label='Add selected']")
            b.click("li[data-testid='httpd']")
            b.click("button[aria-label='Remove selected']")

        # # go to review page
        b.click("button:contains('Next')")
        b.wait_text("h1", "Review")

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "qcow2")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "2")
        b.wait_in_text("#review-list", "Packages")
        b.wait_in_text("#review-list", "3")

        # Create image
        b.click(".pf-c-wizard__footer button:contains('Create image')")

        b.wait_not_present("#create-image-wizard")
        # notification
        # On first load on fedora this notification can take a while to trigger
        with b.wait_timeout(300):
            b.wait_visible("#alertComposeQueued")
        b.click("#alertComposeQueued .pf-c-alert__action button")
        b.wait_not_present("#alertComposeQueued")

        # got to images tab
        b.click("#httpd-server-name")
        with b.wait_timeout(300):
            b.click("#pf-tab-images-blueprint-tabs")
            b.wait_visible("ul[data-list=images]")
        b.wait_in_text("div[data-testid='image-type']", "QEMU Image (.qcow2)")
        # image building needs more time
        with b.wait_timeout(1800):
            b.wait_in_text("div[data-testid='image-status']", "Image build complete")
        # image size should be 2GB
        b.wait_in_text("div[data-testid='image-size']", "2 GB")

        # check for logs
        b.is_present("button:contains('Logs')")

        # download image
        b.click("button[aria-label='Actions']")
        b.click("a:contains('Download')")

        # delete image
        b.click("button[aria-label='Actions']")
        b.click("a[data-testid='delete-image']")
        b.wait_visible("#cmpsr-modal-delete")
        b.click("#cmpsr-modal-delete button:contains('Delete image')")
        b.wait_text("h2", "No images")

        # collect code coverage result
        self.check_coverage()

    # TODO: verify popover text after string translation
    def testAWSStep(self):
        b = self.browser

        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("li[data-blueprint=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select AWS
        b.select_PF4("#image-output-select-toggle", "Amazon Web Services (.raw)")
        # Upload image
        b.wait_visible("label:contains('Upload to AWS')")
        b.click("#image-upload")

        b.click("button[aria-label='AWS upload help']")
        # b.wait_in_text(".pf-c-popover__body",
        #                " Image Builder can upload images you create to an S3 bucket in AWS and "
        #                "then import them into EC2. When the image build is complete and the upload"
        #                " action is successful, the image file is available in the AMI section of "
        #                "EC2. Most of the values required to upload the image can be found in the "
        #                "AWS Management Console.  This upload process requires that you have an "
        #                "Identity and Access Management (IAM) role named vmimport to ensure that "
        #                "the image can be imported from the S3 bucket into EC2. For more details, "
        #                "refer to the AWS Required Service Role. ")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")

        # Auth page
        b.click("button:contains('Next')")

        b.wait_text("h1", "Authentication")

        b.wait_visible("label:contains('Access key ID')")
        b.click("button[aria-label='Access key help']")
        # b.wait_text(".pf-c-popover__body",
        #             "You can create and find existing Access key IDs on the "
        #             "Identity and Access Management (IAM) page in the AWS console.")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-access-key']")
        b.key_press("never")

        b.wait_visible("label:contains('Secret access key')")
        b.click("button[aria-label='Secret access key help']")
        # b.wait_text(".pf-c-popover__body",
        #             "You can view the Secret access key only when you create a new Access key ID "
        #             "on the Identity and Access Management (IAM) page in the AWS console.")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-secret-access-key']")
        b.key_press("gunna")

        # Destination page
        b.click("button:contains('Next')")

        b.wait_text("h1", "Destination")
        b.wait_visible("label:contains('Image name')")
        b.click("button[aria-label='Image name help']")
        # b.wait_text(".pf-c-popover__body",
        #             "Provide a file name to be used for the image file that will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-image-name']")
        b.key_press("give")

        b.wait_visible("label:contains('Amazon S3 bucket')")
        b.click("button[aria-label='S3 bucket help']")
        # b.wait_text(".pf-c-popover__body",
        #             " Provide the S3 bucket name to which the image file will be uploaded before "
        #             "being imported into EC2.  The bucket must already exist in the Region where "
        #             "you want to import your image. You can find a list of buckets on the S3 "
        #             "buckets page in the Amazon S3 storage service in the AWS console. ")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='aws-s3-bucket']")
        b.key_press("you")

        b.wait_visible("label:contains('AWS region')")
        # check image name help button
        b.click("button[aria-label='Region help']")
        # b.wait_text(".pf-c-popover__body",
        #             "Provide the AWS Region where you want to import your image. "
        #             "This must be the same region where the S3 bucket exists.")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        # enter access key id value
        b.focus("input[id='aws-region']")
        b.key_press("up")

        b.click("button:contains('Next')")
        # skip packages and details steps
        b.click("button:contains('Next')")
        b.click("button:contains('Next')")

        # Verify AWS Review page
        b.wait_text("h1", "Review")

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "ami")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "6")
        with b.wait_timeout(120):
            b.wait_in_text("#review-list", "Packages")
            b.wait_in_text("#review-list", "3")

        # the key values are hidden
        b.wait_in_text("#review-list", "Access key ID")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Secret access key")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Image name")
        b.wait_in_text("#review-list", "give")
        b.wait_in_text("#review-list", "Amazon S3 bucket")
        b.wait_in_text("#review-list", "you")
        b.wait_in_text("#review-list", "AWS region")
        b.wait_in_text("#review-list", "up")

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")
        # collect code coverage result
        self.check_coverage()

    # TODO: verify popover text after string translation
    def testAzureStep(self):
        b = self.browser
        self.login_and_go("/composer", superuser=True)
        b.wait_visible("#main")

        # create image wizard (no upload support)
        b.click("li[data-blueprint=httpd-server] button[aria-label='Create image']")
        b.wait_in_text(".pf-c-wizard__main", "httpd-server")
        time.sleep(1)
        # select AWS
        b.select_PF4("#image-output-select-toggle", "Microsoft Azure (.vhd)")
        # Upload image
        b.wait_visible("label:contains('Upload to Azure')")
        b.click("#image-upload")

        b.click("button[aria-label='Azure upload help']")
        # b.wait_in_text(".pf-c-popover__body",
        #                " Image Builder can upload images you create to a Blob container in "
        #                "Microsoft Azure. When the image build is complete and the upload action "
        #                "is successful, the image file is available in the Storage account and Blob "
        #                "container that you specified. ")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")

        # Auth page
        b.click("button:contains('Next')")

        b.wait_text("h1", "Authentication")

        b.wait_visible("label:contains('Storage account')")
        b.click("button[aria-label='Storage account help']")
        # b.wait_text(".pf-c-popover__body",
        #             "Provide the name of a storage account. You can find storage accounts on the "
        #             "Storage accounts page in the Azure portal.")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-account']")
        b.key_press("never")

        b.wait_visible("label:contains('Storage access key')")
        b.click("button[aria-label='Storage access key help']")
        # b.wait_text(".pf-c-popover__body",
        #             " Provide the access key for the desired storage account. You can find the "
        #             "access key on the Access keys  page of the storage account. You can find "
        #             "storage accounts on the Storage accounts page in the Azure portal. ")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-access-key']")
        b.key_press("gunna")

        # Destination page
        b.click("button:contains('Next')")

        b.wait_text("h1", "Destination")
        b.wait_visible("label:contains('Image name')")
        b.click("button[aria-label='Image name help']")
        # b.wait_text(".pf-c-popover__body",
        #             "Provide a file name to be used for the image file that will be uploaded.")
        b.click(".pf-c-popover__content button")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-image-name']")
        b.key_press("give")

        b.wait_visible("label:contains('Storage container')")
        b.click("button[aria-label='Storage container help']")
        # b.wait_text(".pf-c-popover__body",
        #             " Provide the Blob container to which the image file will be uploaded. You can "
        #             "find containers under the Blob service  section of a storage account. You can "
        #             "find storage accounts on the Storage accounts page in the Azure portal. ")
        b.click(".pf-c-popover__content button[aria-label='Close']")
        b.wait_not_present(".pf-c-popover__body")
        b.focus("input[id='azure-storage-container']")
        b.key_press("you-up")

        b.click("button:contains('Next')")
        # skip packages and details steps
        b.click("button:contains('Next')")
        b.click("button:contains('Next')")

        # Verify Azure Review page
        b.wait_text("h1", "Review")

        b.wait_in_text("#review-list", "Blueprint name")
        b.wait_in_text("#review-list", "httpd-server")
        b.wait_in_text("#review-list", "Output type")
        b.wait_in_text("#review-list", "vhd")
        b.wait_in_text("#review-list", "Image size")
        b.wait_in_text("#review-list", "2")
        with b.wait_timeout(120):
            b.wait_in_text("#review-list", "Packages")
            b.wait_in_text("#review-list", "3")

        b.wait_in_text("#review-list", "Storage account")
        b.wait_in_text("#review-list", "never")
        # key value is hidden
        b.wait_in_text("#review-list", "Storage access key")
        b.wait_in_text("#review-list", "*****")
        b.wait_in_text("#review-list", "Image name")
        b.wait_in_text("#review-list", "give")
        b.wait_in_text("#review-list", "Storage container")
        b.wait_in_text("#review-list", "you-up")

        # Close wizard
        b.click("button:contains('Cancel')")
        b.wait_not_present("#create-image-wizard")

        # collect code coverage result
        self.check_coverage()

if __name__ == '__main__':
    testlib.test_main()
